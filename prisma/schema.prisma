// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  referentialIntegrity = "prisma"
  url                  = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model NotionPage {
  pageId         String          @id @map(name: "page_id")
  json           String          @db.LongText
  title          String?         @db.Text
  rootPageId     String          @map(name: "root_page_id")
  lastUpdatedAt  DateTime        @updatedAt @map(name: "last_updated_at")
  iconUrl        String?         @db.Text
  notionSiteData NotionSiteData? @relation(fields: [rootPageId], references: [rootPageId], onDelete: Cascade)
  properties     Json?


  @@index([rootPageId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  subscriptions Subscription[]
  sites         Site[]

}

model Site {
  id      String   @id @default(cuid())
  name    String?
  userId  String   @map(name: "user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  domains Domain[]


  customization SiteCustomization?

  siteType         SiteType        @map(name: "site_type")
  feedbacks        Feedback[]
  notionData       NotionSiteData? @relation(fields: [notionRootPageId], references: [rootPageId])
  notionRootPageId String          @map(name: "notion_root_page_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")


  @@index([userId])
  @@index([notionRootPageId])
}

model SiteCustomization {
  id     String @id @default(cuid())
  json   Json?  @default("{}")
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId String @unique @map(name: "site_id")

  @@index([siteId])
}

enum SiteType {
  docs
  blog
}

model NotionSiteData {
  rootPageId      String            @id @map(name: "root_page_id")
  searchData      Json?             @default("{}") @map(name: "search_data")
  syncing         Boolean?          @default(false)
  lasSyncAt       DateTime?         @map("last_sync_at")
  syncEvents      NotionSyncEvent[]
  sidebarJsonTree Json?             @default("{}") @map(name: "sidebar_json_tree")
  pages           NotionPage[]
  sites           Site[]
}

model NotionSyncEvent {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  rootPageId        String          @map(name: "root_page_id")
  isError           Boolean?        @map("is_error")
  errorMessage      String?         @map("error_message")
  isManual          Boolean         @map("is_manual")
  durationInSeconds Int             @map("duration_in_seconds")
  pagesSynced       Int             @map("pages_synced")
  notionSiteData    NotionSiteData? @relation(fields: [rootPageId], references: [rootPageId], onDelete: Cascade)

  @@index([rootPageId])
}

model Feedback {
  id                String   @id @default(cuid())
  siteId            String   @map(name: "site_id")
  pageId            String   @map(name: "page_id")
  goodVote          Boolean? @map(name: "good_vote")
  neutralVote       Boolean? @map(name: "neutral_vote")
  badVote           Boolean? @map(name: "bad_vote")
  text              String?  @db.Text
  site              Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  idempotencyString String?  @unique @map(name: "idempotency_string")
  createdAt         DateTime @default(now()) @map(name: "created_at")


  // @@index([pageId])
  @@index([siteId])
}

// types are customDomain, internalDomain, basePathInternalDomain, basePathCustomDomain
// only customDomain, internalDomain are editable in domains page
// basePathInternalDomain is never editable
// basePathCustomDomain is editable in settings page, under the /docs rewrites section
model Domain {
  id         String     @id @default(cuid())
  host       String     @unique
  siteId     String     @map(name: "site_id")
  domainType DomainType @map(name: "domain_type")
  site       Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

enum DomainType {
  customDomain
  internalDomain
  basePathInternalDomain
  basePathCustomDomain
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  isSandbox Boolean @map(name: "is_sandbox")
  paddleId  String  @id @map(name: "paddle_id")
  name      String
  active    Boolean @default(true)
  image     String?

  billing_type   String
  billing_period Int

  trial_days Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  subscriptions Subscription[]
  prices        Price[]
}

model Price {
  isSandbox  Boolean  @map(name: "is_sandbox")
  paddleId   String   @map(name: "paddle_id")
  product    Product  @relation(fields: [paddleId], references: [paddleId], onDelete: Cascade)
  currency   String
  unitAmount Int      @map(name: "unit_amount")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")


  @@unique([paddleId, currency, unitAmount])
}

model Subscription {
  paddleUserId         String             @map(name: "paddle_user_id")
  isSandbox            Boolean            @map(name: "is_sandbox")
  id                   String             @id @default(cuid())
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String             @map(name: "user_id")
  product              Product            @relation(fields: [productId], references: [paddleId])
  productId            String             @map(name: "product_id")
  paddleSubscriptionId String             @unique @map(name: "paddle_subscription_id")
  status               SubscriptionStatus
  cancel_url           String?
  update_url           String?
  paddleEmail          String?            @map(name: "paddleEmail")

  marketing_consent Boolean?

  paused_at     DateTime?
  paused_reason String?
  paused_from   DateTime?

  start_date DateTime?

  unit_price String?

  currency                    String?
  canceled_at                 DateTime?
  cancellation_effective_date DateTime?


  createdAt DateTime @default(now()) @map(name: "created_at")

  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
  @@index([productId])
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  past_due
  active
  paused
  trialing
  deleted
}

enum PriceInterval {
  day
  month
  week
  year
}
